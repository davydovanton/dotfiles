########################################
# Ruby snippets                        #
########################################

# New Block
snippet =b
	=begin rdoc
		${0}
	=end
snippet y
	:yields: ${0:arguments}
snippet beg
	begin
		${0}
	rescue ${1:Exception} => ${2:e}
	end

snippet req require
	require "${1}"
snippet reqr
	require_relative "${1}"
snippet #
	# =>
snippet case
	case ${1:object}
	when ${2:condition}
		${0}
	end
snippet when
	when ${1:condition}
		${0}
snippet def
	def ${1:method_name}
		${0}
	end
snippet if
	if ${1:condition}
		${0}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${0}
	end
snippet unless
	unless ${1:condition}
		${0}
	end
snippet wh
	while ${1:condition}
		${0}
	end

##########################
#    object snippets     #
##########################
snippet class class .. initialize(payload) .. call(payload) .. end
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(payload)
			${0}
		end

		def call(payload)
			${0}
		end
	end

snippet mod module .. end
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end
snippet mod module .. ClassMethods .. end
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		module ClassMethods
			${0}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end

# attr_reader
snippet r
	attr_reader :${0:attr_names}
# attr_writer
snippet w
	attr_writer :${0:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${0:attr_names}

# ivc == instance variable cache
snippet ivc
	@${1:variable_name} ||= ${0:cached_value}
# def self
snippet defs
	def self.${1:class_method_name}
		${0}
	end
# def initialize
snippet definit
	def initialize(${1:args})
		${0}
	end

##########################
#     block snippets     #
##########################
snippet b
	{ |${1:var}| ${0} }
snippet begin
	begin
		raise 'A test exception.'
	rescue Exception => e
		puts e.message
		puts e.backtrace.inspect
	else
		# other exception
	ensure
		# always executed
	end

##########################
#   debugging snippets   #
##########################
snippet debug
	require 'debug'

##########################
#     Rspec snippets     #
##########################
snippet desc
	describe ${1:`substitute(substitute(vim_snippets#Filename(), '_spec$', '', ''), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
		${0}
	end
snippet descm
	describe "${1:#method}" do
		${0:pending "Not implemented"}
	end
snippet cont
	context "${1:message}" do
		${0}
	end
snippet bef
	before :${1:each} do
		${0}
	end
snippet aft
	after :${1:each} do
		${0}
	end
snippet let
	let(:${1:object}) { ${0} }
snippet let!
	let!(:${1:object}) { ${0} }
snippet subj
	subject { ${0} }
snippet s.
	subject.${0:method}
snippet exp
	expect(${1:object}).to ${0}
snippet it
	it { ${0} }
snippet itb
	it "${1:spec_name}" do
		${0}
	end
